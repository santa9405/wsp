<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace : mapper의 이름(별칭) -->
<mapper namespace="boardMapper">

<!-- 	resultMap 속성 및 내부태그
		type 속성 : ResultSet을 담을 VO 클래스명으로 어떤 타입을 참조할 것인지 기술(alias 사용가능)
		id 속성 : 해당 ResultMap의 고유 아이디 => select문에서의 resultMap 값으로 사용하는 부분->

		[내부 태그]
		<id> : PK 컬럼을 연결하는 태그
		<result> : PK를 제외한 모든 컬럼을 연결하는 태그
		property 속성 : VO 필드명  / column 속성 : 조회되는 DB 컬럼명
	 -->

	<resultMap type="Board" id="board_rm">
		<id property="boardNo" column="BOARD_NO"/>
		
		<result property="boardTitle" column="BOARD_TITLE"/>
		<result property="boardContent" column="BOARD_CONTENT"/>
		<result property="memberId" column="MEMBER_ID"/>
		<result property="readCount" column="READ_COUNT"/>
		<result property="categoryName" column="CATEGORY_NM"/>
		<result property="boardCreateDate" column="BOARD_CREATE_DT"/>
		<result property="boardModifyDate" column="BOARD_MODIFY_DT"/>
		<result property="boardStatus" column="BOARD_STATUS"/>
	</resultMap>
	
	<!-- Attachment ResultMap -->
	<!-- Attachment 별칭도 등록하기! -->
	<resultMap type="Attachment" id="attachment_rm">
		<id property="fileNo" column="FILE_NO"/>
		<result property="filePath" column="FILE_PATH"/>
		<result property="fileName" column="FILE_NAME"/>
		<result property="fileLevel" column="FILE_LEVEL"/>
		<result property="parentBoardNo" column="PARENT_BOARD_NO"/>
	</resultMap>
	
	
	
	


  <!-- 전체 게시글 수 조회(select / 조회 결과 : 단일 행 / 결과 타입 : 숫자(int) -->
  <!-- resultType : resultSet 결과를 매핑해서 반환되는 타입을 지정
  					타입 지정 시 별칭 또는 전체 클래스명(패키지명 + 클래스명)을 작성해야 함. -->
  <select id="getListCount" resultType="_int">
	  SELECT COUNT(*) FROM V_BOARD
	  WHERE BOARD_STATUS = 'Y'
  </select>
  
  
  <!-- 전체 게시글 목록 조회(select / 조회 결과 : 다중 행, 다중 열 / 한 행은 Board VO와 매핑됨) 
  		* RowBounds를 사용했기 때문에 SELECT문을 단순하게 작성해도 
  		    지정된 offset부터 limit 개수 만큼의 행만 조회됨.
  		    
  		** 조회 결과가 다중 열인 경우 Java 기본자료형에 담을 수 없음. -> VO 사용
  		   resultType = "VO클래스 full name(패키지명+클래스명)"
  		   
  		** 조회 결과가 다중 행인 경우 resultType="list"(X)
  		   -> 한 행씩 조회해서 resultType에 담으면 추후에 List로 자동추가됨.
  		   
  		*** VO 클래스 풀네임으로 부르기 힘들기 때문에 별칭 설정 -> mybatis-config.xml에 작성
  		
  		****************************************************************
  		resultMap
  		 - mybatis에서 가장 강력한 기능 중 하나.
  		 - ResultSet에서 데이터를 가져올 때 작성되는 JDBC 코드를 대부분 줄여주는 역할 담당.
  		 - DB 컬럼명과 VO 필드명이 다를 때 이를 매핑시키는 역할을 함.
  		
  		(DB 컬럼명과 VO 필드명이 같을 경우 resultMap 없이 resultType으로 자동 매핑이 가능)
  		****************************************************************
  -->
  
  <select id="selectList" resultMap="board_rm">
  	SELECT * FROM V_BOARD WHERE BOARD_STATUS = 'Y' ORDER BY BOARD_NO DESC
  </select>
  
  <!-- 썸네일 목록 조회(select / 다중 행, 다중 열) -->
  <!--
		*********************************************************************************************
		전달 받은 매개변수를 mapper 파일 내에서 사용하는 방법
		1) parameterType 속성을 작성(별칭이나 클래스 풀네임) -> 최근에는 자동으로 되는걸로 알고있음.
		2) 얻어온 매개변수가 작성될 위치와 형태에 따라
		 #{매개변수명}   /  ${매개변수명} 으로 필요한 위치에 작성.
		 
		 ${매개변수명}  : Statement, 전달받은 값을 모양 그대로 사용하고자 할 떄 사용. (SQL 구문 조합에 많이 사용)
		 SELECT FILE_NAME, PARENT_BOARD_NO FROM ATTACHMENT
		 WHERE PARENT_BOARD_NO IN ( 매개변수 )
		 AND FILE_LEVEL = 0
		
		 #{매개변수명}  : PreparedStatement, 위치홀더(?)에 매개변수를 값으로써 지정할 때 사용.
		 -> 주의 사항 : 전달 받은 값이 String 형태이면  값의 앞,뒤에  '' (작은따옴표)가 붙음.
		 SELECT FILE_NAME, PARENT_BOARD_NO FROM ATTACHMENT
		 WHERE PARENT_BOARD_NO IN ( '매개변수명')
		 AND FILE_LEVEL = 0
		 
		*********************************************************************************************
	-->
  <select id="selectThumbnailList" resultMap="attachment_rm" parameterType="string">
  	SELECT * FROM ATTACHMENT
	WHERE PARENT_BOARD_NO
	IN ( ${boardNoStr} )
	AND FILE_LEVEL = 0
  </select>
  
  
  <!-- 게시글 상세 조회 (select / 단일 행 / resultMap ) -->
  <select id="selectBoard" resultMap="board_rm" parameterType="_int">
	SELECT * FROM V_BOARD
	WHERE BOARD_NO = #{boardNo}
	AND BOARD_STATUS = 'Y'
  </select>
  
  <!-- 조회 수 증가(update / 실패 0, 성공 1) 
  	   DML 구문 수행 시 resultType은 "_int"로 고정되어 있으므로 생략
  -->
  <update id="increaseReadCount" parameterType="_int">
	UPDATE BOARD SET
	READ_COUNT = READ_COUNT + 1
	WHERE BOARD_NO = #{boardNo}
  </update>
  
  <!-- 게시글 이미지 조회(select / 다중 행 / resultMap 사용(attachment_rm) -->
  <select id="selectBoardFiles" resultMap="attachment_rm" parameterType="_int">
	SELECT FILE_NO, FILE_NAME, FILE_LEVEL, FILE_PATH 
	FROM ATTACHMENT
	WHERE PARENT_BOARD_NO = #{boardNo}
	ORDER BY FILE_LEVEL
  </select>
  
  <!-- 다음 게시글 번호 조회 -->
  <select id="selectNextNo" resultType="_int">
  	SELECT SEQ_BNO.NEXTVAL FROM DUAL
  </select>
  
  <!-- 게시글 삽입 
  		key값만 써주면 됨.
  		#{map.boarNo} (X) , #{boardNo} (O)
  -->
  <insert id="insertBoard" parameterType="map">
	INSERT INTO BOARD(BOARD_NO, BOARD_TITLE, BOARD_CONTENT, BOARD_WRITER, CATEGORY_CD)
	VALUES(#{boardNo}, #{boardTitle}, #{boardContent}, #{boardWriter}, #{categoryCode})
  </insert>
  
  <!-- 게시글 이미지 목록 삽입(insert / parameterType = "list") 
  	   insert성공 : 1 반환 / 실패 : 0 반환
  	   update, delete 성공 : 행의 수 반환, 실패 : 0 반환
  -->
  <insert id="insertAttachmentList" parameterType="list">
  <!-- 
  	collection : 반복 접근할 배열 또는 컬렉션 객체
    item : 컬렉션 객체에서 꺼내온 요소 하나
    separator : 구분자
  -->
   <!-- <foreach collection="list" item="item" separator="">
	INSERT INTO ATTACHMENT
	VALUES(SEQ_FNO.NEXTVAL, #{item.filePath}, #{item.fileName}, #{item.fileLevel}, #{item.parentBoardNo})
   </foreach> -->
   
    INSERT INTO ATTACHMENT
	SELECT SEQ_FNO.NEXTVAL, A.*
	FROM ( 
	  <foreach collection="list" item="item" separator="UNION ALL ">
	  	SELECT #{item.filePath} FILE_PATH, 
	  		   #{item.fileName} FILE_NAME, 
	  		   #{item.fileLevel} FILE_LEVEL, 
	  		   #{item.parentBoardNo} PARENT_BOARD_NO
		FROM DUAL
	  </foreach>
	) A
   
  </insert>
  
  
  
  
  
  
  
  
  
  
  
  
  
  
</mapper>